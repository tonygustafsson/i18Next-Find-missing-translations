{"version":3,"file":"broccoli.js","names":["fse","Plugin","rsvp","sort","vfs","i18nTransform","Promise","i18nextParser","inputNodes","options","arguments","outputPath","resolve","reject","files","count","src","inputPaths","map","x","pipe","on","file","silent","console","log","green","path","push","outputFile","contents","message","region","trim","red","yellow","all","then"],"sources":["../src/broccoli.js"],"sourcesContent":["import fse from 'fs-extra'\nimport Plugin from 'broccoli-plugin'\nimport rsvp from 'rsvp'\nimport sort from 'gulp-sort'\nimport vfs from 'vinyl-fs'\n\nimport i18nTransform from './transform.js'\n\nconst Promise = rsvp.Promise\n\nexport default class i18nextParser extends Plugin {\n  constructor(inputNodes, options = {}) {\n    super(...arguments)\n    this.options = options\n  }\n\n  build() {\n    const outputPath = this.outputPath\n    return new Promise((resolve, reject) => {\n      const files = []\n      let count = 0\n\n      vfs\n        .src(this.inputPaths.map((x) => x + '/**/*.{js,hbs}'))\n        .pipe(sort())\n        .pipe(\n          new i18nTransform(this.options)\n            .on('reading', function (file) {\n              if (!this.options.silent) {\n                console.log('  [read]  '.green + file.path)\n              }\n              count++\n            })\n            .on('data', function (file) {\n              files.push(fse.outputFile(file.path, file.contents))\n              if (!this.options.silent) {\n                console.log('  [write] '.green + file.path)\n              }\n            })\n            .on('error', function (message, region) {\n              if (typeof region === 'string') {\n                message += ': ' + region.trim()\n              }\n              console.log('  [error] '.red + message)\n            })\n            .on('finish', function () {\n              if (!this.options.silent) {\n                console.log()\n                console.log('  Stats:  '.yellow + count + ' files were parsed')\n              }\n\n              Promise.all(files).then(() => {\n                resolve(files)\n              })\n            })\n        )\n    })\n  }\n}\n"],"mappings":"mjCAAA,OAAOA,GAAG,MAAM,UAAU;AAC1B,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,IAAI,MAAM,WAAW;AAC5B,OAAOC,GAAG,MAAM,UAAU;;AAE1B,OAAOC,aAAa,MAAM,gBAAgB;;AAE1C,IAAMC,OAAO,GAAGJ,IAAI,CAACI,OAAO;;AAEPC,aAAa;EAChC,uBAAYC,UAAU,EAAgB,eAAdC,OAAO,uEAAG,CAAC,CAAC;IAClC,2BAASC,SAAS;IAClB,MAAKD,OAAO,GAAGA,OAAO;EACxB,CAAC;;IAED,iBAAQ;MACN,IAAME,UAAU,GAAG,IAAI,CAACA,UAAU;MAClC,OAAO,IAAIL,OAAO,CAAC,UAACM,OAAO,EAAEC,MAAM,EAAK;QACtC,IAAMC,KAAK,GAAG,EAAE;QAChB,IAAIC,KAAK,GAAG,CAAC;;QAEbX,GAAG;QACAY,GAAG,CAAC,MAAI,CAACC,UAAU,CAACC,GAAG,CAAC,UAACC,CAAC,UAAKA,CAAC,GAAG,gBAAgB,GAAC,CAAC;QACrDC,IAAI,CAACjB,IAAI,EAAE,CAAC;QACZiB,IAAI;QACH,IAAIf,aAAa,CAAC,MAAI,CAACI,OAAO,CAAC;QAC5BY,EAAE,CAAC,SAAS,EAAE,UAAUC,IAAI,EAAE;UAC7B,IAAI,CAAC,IAAI,CAACb,OAAO,CAACc,MAAM,EAAE;YACxBC,OAAO,CAACC,GAAG,CAAC,YAAY,CAACC,KAAK,GAAGJ,IAAI,CAACK,IAAI,CAAC;UAC7C;UACAZ,KAAK,EAAE;QACT,CAAC,CAAC;QACDM,EAAE,CAAC,MAAM,EAAE,UAAUC,IAAI,EAAE;UAC1BR,KAAK,CAACc,IAAI,CAAC5B,GAAG,CAAC6B,UAAU,CAACP,IAAI,CAACK,IAAI,EAAEL,IAAI,CAACQ,QAAQ,CAAC,CAAC;UACpD,IAAI,CAAC,IAAI,CAACrB,OAAO,CAACc,MAAM,EAAE;YACxBC,OAAO,CAACC,GAAG,CAAC,YAAY,CAACC,KAAK,GAAGJ,IAAI,CAACK,IAAI,CAAC;UAC7C;QACF,CAAC,CAAC;QACDN,EAAE,CAAC,OAAO,EAAE,UAAUU,OAAO,EAAEC,MAAM,EAAE;UACtC,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;YAC9BD,OAAO,IAAI,IAAI,GAAGC,MAAM,CAACC,IAAI,EAAE;UACjC;UACAT,OAAO,CAACC,GAAG,CAAC,YAAY,CAACS,GAAG,GAAGH,OAAO,CAAC;QACzC,CAAC,CAAC;QACDV,EAAE,CAAC,QAAQ,EAAE,YAAY;UACxB,IAAI,CAAC,IAAI,CAACZ,OAAO,CAACc,MAAM,EAAE;YACxBC,OAAO,CAACC,GAAG,EAAE;YACbD,OAAO,CAACC,GAAG,CAAC,YAAY,CAACU,MAAM,GAAGpB,KAAK,GAAG,oBAAoB,CAAC;UACjE;;UAEAT,OAAO,CAAC8B,GAAG,CAACtB,KAAK,CAAC,CAACuB,IAAI,CAAC,YAAM;YAC5BzB,OAAO,CAACE,KAAK,CAAC;UAChB,CAAC,CAAC;QACJ,CAAC,CAAC,CACL;;MACL,CAAC,CAAC;IACJ,CAAC,4BA/CwCb,MAAM,WAA5BM,aAAa"}